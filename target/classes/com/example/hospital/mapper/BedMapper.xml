<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.hospital.dao.BedMapper" >
  <resultMap id="BaseResultMap" type="com.example.hospital.model.Bed" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="nurse_id" property="nurseId" jdbcType="INTEGER" />
    <result column="patient_id" property="patientId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="CHAR" />
    <result column="bed_id" property="bedId" jdbcType="INTEGER" />
    <result column="ward_id" property="wardId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, nurse_id, patient_id, level, bed_id, ward_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.hospital.model.BedExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bed
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bed
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bed
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.hospital.model.BedExample" >
    delete from bed
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.hospital.model.Bed" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bed (nurse_id, patient_id, level, 
      bed_id, ward_id)
    values (#{nurseId,jdbcType=INTEGER}, #{patientId,jdbcType=INTEGER}, #{level,jdbcType=CHAR}, 
      #{bedId,jdbcType=INTEGER}, #{wardId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.hospital.model.Bed" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bed
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="nurseId != null" >
        nurse_id,
      </if>
      <if test="patientId != null" >
        patient_id,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="bedId != null" >
        bed_id,
      </if>
      <if test="wardId != null" >
        ward_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="nurseId != null" >
        #{nurseId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null" >
        #{patientId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        #{level,jdbcType=CHAR},
      </if>
      <if test="bedId != null" >
        #{bedId,jdbcType=INTEGER},
      </if>
      <if test="wardId != null" >
        #{wardId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.hospital.model.BedExample" resultType="java.lang.Integer" >
    select count(*) from bed
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bed
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.nurseId != null" >
        nurse_id = #{record.nurseId,jdbcType=INTEGER},
      </if>
      <if test="record.patientId != null" >
        patient_id = #{record.patientId,jdbcType=INTEGER},
      </if>
      <if test="record.level != null" >
        level = #{record.level,jdbcType=CHAR},
      </if>
      <if test="record.bedId != null" >
        bed_id = #{record.bedId,jdbcType=INTEGER},
      </if>
      <if test="record.wardId != null" >
        ward_id = #{record.wardId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bed
    set id = #{record.id,jdbcType=INTEGER},
      nurse_id = #{record.nurseId,jdbcType=INTEGER},
      patient_id = #{record.patientId,jdbcType=INTEGER},
      level = #{record.level,jdbcType=CHAR},
      bed_id = #{record.bedId,jdbcType=INTEGER},
      ward_id = #{record.wardId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.hospital.model.Bed" >
    update bed
    <set >
      <if test="nurseId != null" >
        nurse_id = #{nurseId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null" >
        patient_id = #{patientId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=CHAR},
      </if>
      <if test="bedId != null" >
        bed_id = #{bedId,jdbcType=INTEGER},
      </if>
      <if test="wardId != null" >
        ward_id = #{wardId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.hospital.model.Bed" >
    update bed
    set nurse_id = #{nurseId,jdbcType=INTEGER},
      patient_id = #{patientId,jdbcType=INTEGER},
      level = #{level,jdbcType=CHAR},
      bed_id = #{bedId,jdbcType=INTEGER},
      ward_id = #{wardId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>